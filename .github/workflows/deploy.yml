name: Terraform Deploy

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: devops-project-2

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init -upgrade
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1

    - name: Ensure ECR repository exists
      run: |
        if ! aws ecr describe-repositories --repository-names devops-project-2-app; then
          aws ecr create-repository --repository-name devops-project-2-app
        else
          echo "ECR repository already exists, skipping creation"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1

    - name: Add Terraform Stubs for Import
      run: |
        echo 'resource "aws_kms_alias" "this" {
          name          = "alias/eks/${PROJECT_NAME}-eks"
          target_key_id = "dummy"
        }' >> terraform/stubs.tf

        echo 'resource "aws_cloudwatch_log_group" "this" {
          name = "/aws/eks/${PROJECT_NAME}-eks/cluster"
        }' >> terraform/stubs.tf
      shell: bash
      env:
        PROJECT_NAME: devops-project-2


    - name: Import Static Resources
      run: |
        terraform import -lock=false -input=false \
          -var "github_owner=${{ secrets.GH_OWNER }}" \
          -var "github_repo=${{ secrets.GH_NAME }}" \
          aws_ecr_repository.app devops-project-2-app || echo "Already imported"

        terraform import -lock=false -input=false \
          -var "github_owner=${{ secrets.GH_OWNER }}" \
          -var "github_repo=${{ secrets.GH_NAME }}" \
          aws_iam_openid_connect_provider.github arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/token.actions.githubusercontent.com || echo "Already imported"

        terraform import -lock=false -input=false \
          -var "github_owner=${{ secrets.GH_OWNER }}" \
          -var "github_repo=${{ secrets.GH_NAME }}" \
          aws_kms_alias.this arn:aws:kms:eu-central-1:${{ secrets.AWS_ACCOUNT_ID }}:alias/eks/${PROJECT_NAME}-eks || echo "Already imported"

        terraform import -lock=false -input=false \
          -var "github_owner=${{ secrets.GH_OWNER }}" \
          -var "github_repo=${{ secrets.GH_NAME }}" \
          aws_cloudwatch_log_group.this "/aws/eks/${PROJECT_NAME}-eks/cluster" || echo "Already imported"
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        PROJECT_NAME: devops-project-2


    - name: Terraform Import EKS Cluster if exists
      run: |
        set -e

        if aws eks describe-cluster --name ${PROJECT_NAME}-eks; then
          echo "EKS cluster exists, importing resources..."

          terraform import module.eks.aws_eks_cluster.this ${PROJECT_NAME}-eks

          NODE_GROUPS=$(aws eks list-nodegroups --cluster-name ${PROJECT_NAME}-eks --query 'nodegroups' --output text)
          for ng in $NODE_GROUPS; do
            terraform import module.eks.aws_eks_node_group.ng["$ng"] ${PROJECT_NAME}-eks:$ng
          done
        else
          echo "No existing EKS cluster found, Terraform will create one"
        fi
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        PROJECT_NAME: devops-project-2

    - name: Terraform Plan
      run: terraform plan
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        TF_VAR_github_owner: ${{ secrets.GH_OWNER }}
        TF_VAR_github_repo: ${{ secrets.GH_NAME }}

    - name: Terraform Apply Static Resources
      run: terraform apply -auto-approve -target=aws_ecr_repository.app -target=aws_iam_openid_connect_provider.github -target=aws_kms_alias.this -target=aws_cloudwatch_log_group.this
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        TF_VAR_github_owner: ${{ secrets.GH_OWNER }}
        TF_VAR_github_repo: ${{ secrets.GH_NAME }}

    - name: Terraform Apply EKS Cluster
      run: terraform apply -auto-approve -target=module.eks
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        TF_VAR_github_owner: ${{ secrets.GH_OWNER }}
        TF_VAR_github_repo: ${{ secrets.GH_NAME }}

    - name: Terraform Apply Helm Add-ons
      run: terraform apply -auto-approve -target=helm_release.kube_prometheus_stack -target=helm_release.metrics_server
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        TF_VAR_github_owner: ${{ secrets.GH_OWNER }}
        TF_VAR_github_repo: ${{ secrets.GH_NAME }}
